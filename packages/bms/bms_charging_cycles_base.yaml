# Updated : 2025.06.10
# Version : 1.1.1
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

# Charging cycles adjustment
number:
  - platform: template
    name: "${name} ${bms_name} charging cycles base"
    id: bms${bms_id}_charging_cycles_base
    step: 1
    min_value: 0
    max_value: 200
    restore_value: true
    mode: "${yambms_input_number_mode}"
    initial_value: 0
    icon: mdi:counter
    optimistic: true
    entity_category: config

sensor:
  - platform: template
    name: "${name} ${bms_name} charging cycles"
    id: bms${bms_id}_charging_cycles
    update_interval: ${bms_update_interval}
    accuracy_decimals: 0
    state_class: total
    icon: mdi:counter
    filters:
      - or:
        - throttle: 10s
        - delta: 1
    lambda: |-
      float raw = id(bms${bms_id}_charging_cycles_raw).state;
      if (isnan(raw)) {
        raw = 0;
      }
      return raw + id(bms${bms_id}_charging_cycles_base).state;

  - platform: template
    name: "${name} ${bms_name} total charging cycle capacity"
    id: bms${bms_id}_cycle_capacity
    update_interval: ${bms_update_interval}
    accuracy_decimals: 0
    filters:
      - or:
        - throttle: 10s
        - delta: 1
    lambda: |-
      float raw_capacity = id(bms${bms_id}_cycle_capacity_raw).state;
      if (isnan(raw_capacity)) {
        float cycles_raw = id(bms${bms_id}_charging_cycles_raw).state;
        if (isnan(cycles_raw)) {
          cycles_raw = 0;
        }
        float cycles_total = cycles_raw + id(bms${bms_id}_charging_cycles_base).state;
        if (isnan(id(bms${bms_id}_battery_capacity).state)) {
          return NAN;
        }
        return cycles_total * id(bms${bms_id}_battery_capacity).state;
      }
      return raw_capacity +
             id(bms${bms_id}_charging_cycles_base).state *
             id(bms${bms_id}_battery_capacity).state;
