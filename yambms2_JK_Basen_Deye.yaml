# Updated : 2025.06.29
# Version : 1.5.8
# GitHub  : https://github.com/Sleeper85/esphome-yambms

# YamBMS ( Yet another multi-BMS Merging Solution )

# This YAML is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/gpl.html>.

######################## YamBMS Local Packages Version #########################

# You need to copy the `packages` folder into the same folder as this YAML in order to compile it.
# Don't forget to configure your WiFi credentials in the secrets.yaml

################################################################################

# Don't forget to configure your WiFi credentials in the secrets.yaml
#
# If needed, configure a static IP here
# wifi:
#   manual_ip:
#     static_ip: 192.168.0.85
#     gateway: 192.168.0.1
#     subnet: 255.255.255.0
#     dns1: 8.8.8.8
#     dns2: 8.8.4.4

logger:
  level: INFO # VERBOSE / DEBUG / INFO / WARN
  logs:
    basen_controller: INFO
    basen_bms: INFO
    jk_rs485_sniffer: WARN
    jk_rs485_bms: WARN
    modbus: ERROR
    scheduler: WARN
    component: ERROR
    sensor: WARN
    #mqtt: INFO
    #mqtt.idf: INFO
    #mqtt.component: INFO
    #mqtt.sensor: INFO
    #mqtt.switch: INFO
    #api.service: INFO
    api: WARN

ota:
  platform: esphome
  
# Please use the native `api` component instead of the `mqtt` section.
# If you use Home Assistant, the native API is more lightweight.
# If there is no HA server connected to this API, the ESP32 reboots every 15 minutes to try to resolve the problem.
# The "reboot_timeout: 0s" option will keep your ESP32 up and running even if you lose connection to your HA server.
api:
  reboot_timeout: 0s

# If you don't want to use ESPHome's native API you can use MQTT instead.
# In this case don't forget to remove the 'api:' section.
# mqtt:
#   broker: !secret mqtt_host
#   username: !secret mqtt_username
#   password: !secret mqtt_password
#   id: mqtt_client

# Please note that enabling this component will take up a lot of memory and may decrease
# stability and be the cause of reboot depending on the capabilities of the board used.
# web_server:
#   port: 80
#   log: false
#   ota: false

# +--------------------------------------+
# | Global Settings                      |
# +--------------------------------------+
substitutions:
  # ESP32 name / hostname
  name: ''
  hostname: 'yambms2'
  friendly_name : 'YamBMS2'
  # +--------------------------------------+
  # | YamBMS Settings                      |
  # +--------------------------------------+
  # Please read the cut-off charging logic README to understand how the YamBMS works
  yambms_id: 'yambms2'
  yambms_name: 'YamBMS 2'
  yambms_update_interval: '1s'
  # Input numbers can be displayed as a slider or an input box, options are 'slider' or 'box'.
  yambms_input_number_mode: 'slider'
  # Please check and fill in the options below correctly according to your battery chemistry and number of cells in series.
  # These parameters are important and used for charging logic.
  # Battery Chemistry
  yambms_battery_chemistry: '1' # 1-LFP | 2-Li-ion | 3-LTO
  # Number of cells in series
  yambms_cell_count: '16'
  # Bulk / Absorption Voltage : corresponds to the Bulk voltage that will be used to charge the battery. (LFP : 55.2V = 3.45V/Cell for 16S battery)
  yambms_bulk_v: '55.2'
  # Float Voltage : corresponds to the voltage at which the battery would be maintained at the end of charge. (LFP : 53.6V = 3.35V/Cell for 16S battery)
  yambms_float_v: '53.6'
  # Rebulk voltage, voltage from which a new Bulk charge can start. (LFP : 52.8V = 3.3V/Cell for 16S battery)
  yambms_rebulk_v: '52.8'
  # Maximum time in minutes that the cut-off step can last before charging is complete
  # If your cells are properly balanced this step ends at the fastest after the `cut-off timer`
  # This timer can be deactivated with a switch
  yambms_eoc_timer: '30'
  # Time in seconds during which the end of charge conditions must be respected (cut-off + cells not equalizing)
  yambms_cutoff_timer: '60'
  # Max. charge current : corresponds to the maximum charge current which may be requested by YamBMS.
  # The current requested will be proportional to the BMS count without ever exceeding this value.
  yambms_max_requested_charge_current: '200' # in Ampere
  # Max. discharge current : corresponds to the maximum discharge current which may be requested by YamBMS.
  # The current requested will be proportional to the BMS count without ever exceeding this value.
  yambms_max_requested_discharge_current: '250' # in Ampere
  # +--------------------------------------+
  # | Shunt Settings                      |
  # +--------------------------------------+
  shunt_update_interval: '3s'  # frequency at which Shunt data is refreshed
  shunt_combine_interval: '1s' # frequency at which Shunt data is combined in YamBMS
  # +--------------------------------------+
  # | BMS Settings                         |
  # +--------------------------------------+
  bms_update_interval: '5s'    # frequency at which BMS data is refreshed, going below '3s' can cause problems
  bms_combine_interval: '1s'   # frequency at which BMS data is combined in YamBMS
  bms_cutoff_timer: '50s'      # time during which the end of charge conditions must be respected (cut-off + cells not equalizing)

  # Modbus options
  modbus_update_interval: '5s' # frequency with which BMS/Shunt modbus servers are queried
  modbus_baud_rate: '19200' # 9600 / 19200 / 11520
  modbus_command_throttle: '0ms' # minimum time in between 2 requests to the device
  modbus_send_wait_time: '250ms' # time in milliseconds before the next ModBUS command is sent if an answer from a previous command is pending

# +--------------------------------------+
# | Packages                             |
# +--------------------------------------+

# PLEASE READ : https://github.com/Sleeper85/esphome-yambms/blob/main/documents/README/YamBMS_main_YAML_HowTo.md

packages:

  ############### >>> UNCOMMENT YOUR BOARD <<< ###############
  ############### >>>   ONLY ONE BOARD !   <<< ###############

  # This list is incomplete, other board.yaml are available in the board folder

  # device_board: !include packages/board/board_ESP32_Generic.yaml
  # device_board: !include packages/board/board_ESP32_DevKit-V1.yaml
  # device_board: !include packages/board/board_ESP32_LilyGo-T-CAN485.yaml
  # device_board: !include packages/board/board_ESP32_EVB.yaml
  # device_board: !include packages/board/board_ESP32_Atom-Lite.yaml
  # device_board: !include packages/board/board_ESP32-C3_ETH01-EVO.yaml
  # device_board: !include packages/board/board_ESP32-S3_DevKitC-1.yaml
  device_board: !include packages/board/board_ESP32-S3_LilyGo-T-Connect.yaml
  # device_board: !include packages/board/board_ESP32-S3_AtomS3-Lite.yaml
  
  # device_board: !include
  #   file: packages/board/board_ESP32-S3_AtomS3.yaml # board_ESP32-S3_AtomS3R.yaml
  #   vars:
  #     display_auto_next_page_interval: '5s'

  ########### >>> UNCOMMENT YOUR BOARD OPTIONS <<< ###########

  # RS485
  uart_esp_1: !include packages/board/board_options_itf_uart_esp_1.yaml
  uart_esp_2: !include packages/board/board_options_itf_uart_esp_2.yaml
  uart_esp_3: !include packages/board/board_options_itf_uart_esp_3.yaml

  # ESP32_CAN (TJA105x, SN65HVD230, M5Stack CAN base/unit)
  canbus_node_1: !include
    file: packages/board/board_options_itf_canbus_esp32_can.yaml
    vars:
      canbus_node_id: 'canbus_bms_1'

  ############################################################

  modbus: !include
    file: packages/base/device_modbus.yaml
    vars:
      modbus_role: 'server' # client / server
      modbus_uart_id: 'uart_esp_1' # RS485 board
      
  sniffer1: !include
    file: packages/bms/bms_combine_JK_RS485_Modbus_sniffer.yaml
    vars:
      sniffer_id: 'sniffer1'
      sniffer_protocol: 'JK02_32S'
      sniffer_uart_id: 'uart_esp_3'

  # Mode2 : configure the DIP switches of your BMS from 0x01 to 0x0F (don't use the 0x00 address, maximum 15 BMS)
  bms1: !include
    file: packages/bms/bms_modbus_JK_RS485_Modbus_bms_standard.yaml
    vars:
      # Sniffer ID
      sniffer_id: 'sniffer1'
      # BMS vars
      bms_id: '1' # must be a number
      bms_name: 'JK-BMS 1'
      bms_address: '0x01' # BMS 1 DIP switch
  
  bms2: !include
    file: packages/bms/bms_modbus_JK_RS485_Modbus_bms_standard.yaml
    vars:
      # Sniffer ID
      sniffer_id: 'sniffer1'
      # BMS vars
      bms_id: '2' # must be a number
      bms_name: 'JK-BMS 2'
      bms_address: '0x02' # BMS 2 DIP switch
      
  # Basen controller
  basencontroller: !include
    file: packages/bms/bms_combine_BASEN_RS485_controller.yaml
    vars:
      basen_uart_id: 'uart_esp_2'
      basen_uart_baud_rate: '9600'
      basen_controller_id: "basen_controller_1"

  # Configure the DIP switches of your BMS from 0x01 to 0x0F (don't use the 0x00 address, maximum 15 BMS)
  bms3: !include
    file: packages/bms/bms_modbus_BASEN_RS485_bms_full.yaml
    vars:
      # BMS vars
      bms_id: '3' # must be a number
      bms_name: 'Basen-BMS 1'
      bms_address: '0x01' # BMS 1 DIP switch
  
  bms4: !include
    file: packages/bms/bms_modbus_BASEN_RS485_bms_full.yaml
    vars:
      # BMS vars
      bms_id: '4' # must be a number
      bms_name: 'Basen-BMS 2'
      bms_address: '0x02' # BMS 2 DIP switch

  # Deye BMS top unit (required)
  bms_top: !include
    file: packages/bms/bms_sensors_DEYE_CAN_top_full.yaml
    vars:
      # CAN BUS ID
      canbus_id: 'canbus_bms_1'
      deye_name: 'DEYE-Top 1'
      deye_id: '1'

  # Deye module 1
  bms5: !include
    file: packages/bms/bms_modbus_DEYE_CAN_module_full.yaml
    vars:
      # CAN BUS ID
      canbus_id: 'canbus_bms_1'
      # BMS vars
      bms_id: '5' # must be a number
      bms_name: 'DEYE-BMS 1'
      deye_id: '1'
      deye_module_id: '0'    # Modules are numbered with 0-9
      
  # Deye module 2
  bms6: !include
    file: packages/bms/bms_modbus_DEYE_CAN_module_full.yaml
    vars:
      # CAN BUS ID
      canbus_id: 'canbus_bms_1'
      # BMS vars
      deye_id: '1'
      bms_id: '6' # must be a number
      bms_name: 'DEYE-BMS 2'
      deye_module_id: '1' # Second module

  #yambms: !include packages/yambms/yambms.yaml

  # yambms_custom: !include yambms_custom.yaml

# +--------------------------------------+
# | DEBUG ( logger level must be DEBUG ) |
# +--------------------------------------+

  device_debug: !include
    file: packages/base/device_debug_ESP32.yaml
    vars:
      debug_name: 'Debug'
      debug_update_interval: '5s'
